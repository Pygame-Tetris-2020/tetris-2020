# Цвета
CYAN = (0, 240, 240)
BLUE = (0, 0, 240)
MUSTARD = (240, 160, 0)
YELLOW = (240, 240, 0)
GREEN = (0, 240, 0)
VIOLET = (160, 0, 240)
RED = (240, 0, 0)
colors = [CYAN, BLUE, MUSTARD, YELLOW,
          GREEN, VIOLET, RED
          ]
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

WHITE_HEX = '#ffffff'

colors_HEX = ['#00f0f0', '#0000f0', '#f0a000', '#f0f000',
              '#00f000', '#a000f0', '#f00000'
              ]

# Настроечные константы
FPS = 30
width = 900  # ширина экрана
height = 800  # высота экрана
cube_edge = 35  # ребро кубика
glass_x = 200  # экранная координата x левого верхнего угла "стакана"
glass_y = 50  # экранная координата y левого верхнего угла "стакана"
next_box_x = 585  # экранная координата x левого верхнего угла поля со следующей фигурой
next_box_y = 85  # экранная координата y левого верхнего угла поля со следующей фигурой
hor_moving_delay = 100  # задержка при перемещении фигуры по горизонтали
normal_vert_moving_delay = 500  # нормальная задержка при перемещении фигуры по вертикали
animation_moving_delay = 50  # задержка при перемещении фигуры по вертикали в анимации главного меню

# Словарь композиций
music_bank = {'original': 'sounds/TR1.mp3',
              'modern': 'sounds/TR2.mp3'}

# Словарь звуков
sound_bank = {'figure_stopping': 'sounds/figure_stopping.wav',
              'destroying_line': 'sounds/destroying_line.wav',
              'game_ov': 'sounds/game_over.wav',
              'butt_click': 'sounds/button.wav'}

""" Словарь фигур
Порядок следования кубиков в словаре: самый нижний, 
самый левый, самый правый, оставшийся
Ключ каждой строки во внутреннем словаре - величина 
поворота фигуры по часовой стрелке (в градусах) """

figure_dict = {'I': {0: [(0, 2), (0, 1), (0, 0), (0, -1)],
                     90: [(0, 0), (-1, 0), (2, 0), (1, 0)],
                     180: [(0, 2), (0, 1), (0, 0), (0, -1)],
                     270: [(0, 0), (-1, 0), (2, 0), (1, 0)]},

               'J': {0: [(0, 1), (-1, 1), (0, 0), (0, -1)],
                     90: [(0, 0), (-1, 0), (1, 0), (-1, -1)],
                     180: [(0, 1), (0, 0), (1, -1), (0, -1)],
                     270: [(1, 1), (-1, 0), (1, 0), (0, 0)]},

               'L': {0: [(0, 1), (0, 0), (1, 1), (0, -1)],
                     90: [(-1, 1), (-1, 0), (1, 0), (0, 0)],
                     180: [(0, 1), (-1, -1), (0, 0), (0, -1)],
                     270: [(0, 0), (-1, 0), (1, 0), (1, -1)]},

               'O': {0: [(0, 0), (0, -1), (1, 0), (1, -1)],
                     90: [(0, 0), (0, -1), (1, 0), (1, -1)],
                     180: [(0, 0), (0, -1), (1, 0), (1, -1)],
                     270: [(0, 0), (0, -1), (1, 0), (1, -1)]},

               'S': {0: [(1, 1), (0, 0), (1, 0), (0, -1)],
                     90: [(0, 0), (-1, 0), (1, -1), (0, -1)],
                     180: [(1, 1), (0, 0), (1, 0), (0, -1)],
                     270: [(0, 0), (-1, 0), (1, -1), (0, -1)]},

               'T': {0: [(0, 1), (0, 0), (1, 0), (0, -1)],
                     90: [(0, 1), (-1, 0), (1, 0), (0, 0)],
                     180: [(0, 1), (-1, 0), (0, 0), (0, -1)],
                     270: [(0, 0), (-1, 0), (1, 0), (0, -1)]},

               'Z': {0: [(0, 1), (0, 0), (1, 0), (1, -1)],
                     90: [(0, 0), (-1, -1), (1, 0), (0, -1)],
                     180: [(0, 1), (0, 0), (1, 0), (1, -1)],
                     270: [(0, 0), (-1, -1), (1, 0), (0, -1)]}
               }
